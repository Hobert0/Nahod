@using Cms.Models
@model Cms.Models.MultipleIndexModel
@{
    Layout = "~/Views/Shared/_LayoutCms.cshtml";
    ViewBag.Title = "Kategórie produktov";
    var topcat = "";
    List<SelectListItem> znacka = new List<SelectListItem>();
    var pocetZaznamov = Model.CategoriesModel.Count();
}
<style>
    .sidenav > a:nth-child(3) {
        border-left: 5px solid #00abe8;
        color: #f1f1f1;
        background-color: #464646;
    }

    .dropdown-container2 {
        display: block;
    }
</style>

<h2>Kategórie produktov</h2>

<hr />

@using (Html.BeginForm("AddCategory", "Products", FormMethod.Post, new { enctype = "multipart/form-data", id = "MyformCats" }))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <h4>Pridať kategóriu</h4>
        <br />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="row" style="margin:0">
            <div class="col-md-8 pb-4" style="padding:0">
                Titulná fotografia
            </div>
            <br />
            <div class="col-md-8" style="padding: 0">
                <div class="form-group">
                    <div class="col-md-12 btnvyber" style="padding:0">
                        <a id="btn_vis" style="cursor:pointer">Vyber fotografie</a>
                        @Html.TextBoxFor(model => model.Categories.TitleImage, "", new { @type = "file", @class = "form-control", @accept = "jpg|png|jpeg|gif", @style = "max-width: 67%;height:60px;display:none;", @id = "bttn", @onchange = "pressed()" })
                        <label id="fileLabel">Nie je vybratá žiadna fotografia.</label>
                        @Html.ValidationMessageFor(model => model.Categories.Image, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-8" style="padding:0">
                @Html.EditorFor(model => model.Categories.Name, new { htmlAttributes = new { @class = "form-control", placeholder = "Názov kategórie", id = "categoryname" } })
                @Html.ValidationMessageFor(model => model.Categories.Name, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-8" style="padding:0">
                @Html.EditorFor(model => model.Categories.Slug, new { htmlAttributes = new { @class = "form-control", placeholder = "Slug", id = "slug", onclick = "createSlug()" } })
                @Html.ValidationMessageFor(model => model.Categories.Slug, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-8" style="padding:0">
                @Html.TextAreaFor(model => model.Categories.Description, new { @class = "form-control", placeholder = "Popis kategórie", id = "overheslo" })
                @Html.ValidationMessageFor(model => model.Categories.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">           
            <div class="col-md-8" style="padding:0">
                Heureka?<br>
                @Html.CheckBoxFor(model => model.Categories.Heureka, new { })
                @Html.ValidationMessageFor(model => model.Categories.Heureka, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-8" style="padding:0">
                Heureka darček ?<br>
                @Html.CheckBoxFor(model => model.Categories.HeurekaDarcek, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Categories.HeurekaDarcek, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group d-none">
            <div class="col-md-8" style="padding:0">
                @Html.EditorFor(model => model.Categories.HeurekaDarcekText, new { htmlAttributes = new { @class = "form-control", placeholder = "Heureka darček - text" } })
                @Html.ValidationMessageFor(model => model.Categories.HeurekaDarcekText, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="row p-0">
            <div class="col-md-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.Categories.Maincat, "Hlavná kategória")
                    <div class="col-md-13">
                        @Html.DropDownListFor(model => model.Categories.Maincat, (IEnumerable<SelectListItem>)ViewData["Maincat"], new { onchange = "maincatfunc(this.value)", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Categories.Maincat, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col-md-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.Categories.Topcat, "Nadradená kategória")
                    <div class="col-md-13">
                        @Html.DropDownListFor(model => model.Categories.Topcat, (Enumerable.Empty<SelectListItem>()), new { onchange = "catfunc(this.value)", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Categories.Topcat, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>


            <div class="col-md-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.Categories.Topcat2, "Nadradená kategória 2")
                    <div class="col-md-13">
                        @Html.DropDownListFor(model => model.Categories.Topcat2, (Enumerable.Empty<SelectListItem>()), new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Categories.Topcat2, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <div>
                <input type="submit" value="Pridať kategóriu" class="btn btn-success submitbtn" />
            </div>
        </div>
    </div>

}
<hr />
<table class="table" id="catsTable" style="">
    <thead>
        <tr>
            <th>ID</th>
            <th>Fotografia</th>
            <th>Názov</th>
            <th>Slug</th>
            <th>Hlavná kat.</th>
            <th>Nadradená kat.</th>
            <th>Nadradená kat.2</th>
            <th>Popis</th>
            <th style="text-align:center">Vymazať</th>
        </tr>
    </thead>
    <tbody>
        @if (ViewBag.Details == null)
        {
            var counter = 0;
            foreach (var item in Model.CategoriesModel.OrderBy(i => i.maincat))
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.id)</td>
                    <td id="foto-@item.id"><img src="~/Uploads/@Html.DisplayTextFor(modelItem => item.image)" style="height: 40px;" /></td>
                    <td><strong id="name-@item.id">@Html.DisplayFor(modelItem => item.name)</strong></td>
                    <td id="slug-@item.id">@Html.DisplayFor(modelItem => item.slug)</td>
                    <td id="main-@item.id">@Html.DisplayFor(modelItem => item.maincat)</td>
                    <td id="top-@item.id">@Html.DisplayFor(modelItem => item.topcat)</td>
                    <td id="top2-@item.id">@Html.DisplayFor(modelItem => item.topcat2)</td>
                    <td id="des-@item.id">@Html.DisplayFor(modelItem => item.description)</td>
                    <td align="center"> @Html.ActionLink("Editovať", "EditCat", "Products", new { id = item.id }, new { @class = "btn btn-warning", style = "color: #ffffff !important;" }) @Html.ActionLink(HttpUtility.HtmlDecode("&#215;"), "DeleteCategory", new { id = item.id, confirm = true }, new { onclick = "return confirm('Naozaj chcete vymazať túto kategóriu?')", @class = "btn btn-danger", data_toggle = "tooltip", data_placement = "top", title = "Kliknutím nenávratne vymažete kategóriu." })</td>
                </tr>

                counter++;
            }
        }

    </tbody>
</table>

<script>
    $(document).ready(function () {
        $('#catsTable').DataTable({
            "order": [0, 'desc'],
            "language": {
                "url": "https://cdn.datatables.net/plug-ins/1.10.19/i18n/Slovak.json"
            }
        });

        $("#Categories_HeurekaDarcek").click(function () {
            if ($("#Categories_HeurekaDarcek").is(":checked")) {
                $("#Categories_HeurekaDarcekText").parents(".form-group").removeClass("d-none");
            } else {
                $("#Categories_HeurekaDarcekText").parents(".form-group").addClass("d-none");
            }
        });
    });

    function catfunc(value) {
        var url = '@Url.Action("FetchCategories", "Products")'; // Don't hard code your url's!
        var categories = $('#Categories_Topcat2'); // cache it
        var id = value; // Use $(this) so you don't traverse the DOM again
            $.getJSON(url, { category: id }, function(response) {
                categories.empty(); // remove any existing options
                categories.append($('<option> </option>').text(""));
                $.each(response, function (index, item) {
                    categories.append($('<option></option>').text(item.Text));
                });
            });
    }

    function maincatfunc(value) {
        var url = '@Url.Action("FetchCategories", "Products")'; // Don't hard code your url's!
        var categories = $('#Categories_Topcat'); // cache it
        var id = value; // Use $(this) so you don't traverse the DOM again
            $.getJSON(url, { maincat: id }, function(response) {
                categories.empty(); // remove any existing options
                categories.append($('<option> </option>').text(""));
                $.each(response, function (index, item) {
                    categories.append($('<option></option>').text(item.Text));
                });
            });
    }

    function catfuncedit(value, id) {
        var url = '@Url.Action("FetchCategories", "Products")'; // Don't hard code your url's!
        var categories = $("#e-top2-"+id); // cache it
        var id = value; // Use $(this) so you don't traverse the DOM again
        $.getJSON(url, { category: id }, function(response) {
            categories.empty(); // remove any existing options
            categories.append($('<option> </option>').text(""));
            $.each(response, function (index, item) {
                categories.append($('<option></option>').text(item.Text));
            });
        });
    }

    function editCat(id) {
        if (document.getElementById("cat-" + id + "").style.display == "none") {
            document.getElementById("cat-" + id + "").style.display = "table-row";
        } else {
            document.getElementById("cat-" + id + "").style.display = "none";
        }

        var name = document.getElementById("name-" + id + "").innerHTML;
        var slug = document.getElementById("slug-" + id + "").innerHTML;
        var top = document.getElementById("top-" + id + "").innerHTML;
        var top2 = document.getElementById("top2-" + id + "").innerHTML;
        var des = document.getElementById("des-" + id + "").innerHTML;
        document.getElementById("e-name-" + id + "").value = name;
        document.getElementById("e-slug-" + id + "").value = slug;
        document.getElementById("e-top-" + id + "").value = top;
        document.getElementById("e-top2-" + id + "").value = top2;
        document.getElementById("e-des-" + id + "").value = des;
        document.getElementById("e-id-" + id + "").value = id;

    }
    function createSlug() {
        var catName = document.getElementById("categoryname").value;
        var newSlug = string_to_slug(catName);
        document.getElementById("slug").value = newSlug;
    }
    function string_to_slug (text) {
        text = text.toString().toLowerCase().trim();

        const sets = [
            {to: 'a', from: '[ÀÁÂÃÄÅÆĀĂĄẠẢẤẦẨẪẬẮẰẲẴẶ]'},
            {to: 'c', from: '[ÇĆĈČ]'},
            {to: 'd', from: '[ÐĎĐÞ]'},
            {to: 'e', from: '[ÈÉÊËĒĔĖĘĚẸẺẼẾỀỂỄỆ]'},
            {to: 'g', from: '[ĜĞĢǴ]'},
            {to: 'h', from: '[ĤḦ]'},
            {to: 'i', from: '[ÌÍÎÏĨĪĮİỈỊ]'},
            {to: 'j', from: '[Ĵ]'},
            {to: 'ij', from: '[Ĳ]'},
            {to: 'k', from: '[Ķ]'},
            {to: 'l', from: '[ĹĻĽŁ]'},
            {to: 'm', from: '[Ḿ]'},
            {to: 'n', from: '[ÑŃŅŇ]'},
            {to: 'o', from: '[ÒÓÔÕÖØŌŎŐỌỎỐỒỔỖỘỚỜỞỠỢǪǬƠ]'},
            {to: 'oe', from: '[Œ]'},
            {to: 'p', from: '[ṕ]'},
            {to: 'r', from: '[ŔŖŘ]'},
            {to: 's', from: '[ßŚŜŞŠ]'},
            {to: 't', from: '[ŢŤ]'},
            {to: 'u', from: '[ÙÚÛÜŨŪŬŮŰŲỤỦỨỪỬỮỰƯ]'},
            {to: 'w', from: '[ẂŴẀẄ]'},
            {to: 'x', from: '[ẍ]'},
            {to: 'y', from: '[ÝŶŸỲỴỶỸ]'},
            {to: 'z', from: '[ŹŻŽ]'},
            {to: '-', from: '[·/_,:;\']'}
        ];

        sets.forEach(set => {
            text = text.replace(new RegExp(set.from,'gi'), set.to)
        });

        return text
            .replace(/\s+/g, '-')    // Replace spaces with -
            .replace(/[^\w-]+/g, '') // Remove all non-word chars
            .replace(/--+/g, '-')    // Replace multiple - with single -
            .replace(/^-+/, '')      // Trim - from start of text
            .replace(/-+$/, '')      // Trim - from end of text

    }
</script>

<script>
    $("#btn_vis").click(function () {
        $("#bttn").trigger('click');
    });

    window.pressed = function () {
        var a = document.getElementById('bttn');
        if (a.files.length > 1) {
            fileLabel.innerHTML = "Boli vybraté " + a.files.length + " fotografie.";
        }
        else if (a.files.length = 1) {
            fileLabel.innerHTML = "Bola vybratá " + a.files.length + " fotografia.";
        }
    };

</script>

